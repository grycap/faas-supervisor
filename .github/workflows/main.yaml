name: Test, build and deploy

on:
  push:
   branches: ["**"]
  pull_request:
    branches: ["**"]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Test with unittest
      run: python -m unittest discover -s test/unit/faassupervisor -p '*.py'
  
  pypi:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine
        python -m pip install -r requirements.txt
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USER }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*

  build-amd64:
    needs: test
    runs-on: ubuntu-20.04
    container: ubuntu:16.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        apt update
        apt install -y software-properties-common build-essential zlib1g-dev
        add-apt-repository -y ppa:deadsnakes/ppa
        apt update
        apt install -y python3.8-dev python3.8-venv zip
        python3.8 -m ensurepip
        python3.8 -m pip install pyinstaller
        python3.8 -m pip install -r requirements.txt
    - name: Build binary
      run: |
        pyinstaller --onefile -n supervisor-bin faassupervisor/supervisor.py
        pyinstaller faassupervisor/supervisor.py
        cd dist
        zip -r supervisor.zip supervisor
        rm -r supervisor
        mv supervisor-bin supervisor
    - name: Upload amd64 binary
      uses: actions/upload-artifact@v2
      with:
        name: supervisor
        path: dist/supervisor
    - name: Upload amd64 zip
      uses: actions/upload-artifact@v2
      with:
        name: supervisor.zip
        path: dist/supervisor.zip

  buil-awslambdaric-amd64:
    needs: test
    runs-on: ubuntu-20.04
    container: ubuntu:16.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        apt update
        apt install -y software-properties-common build-essential zlib1g-dev
        add-apt-repository -y ppa:deadsnakes/ppa
        apt update
        apt install -y python3.8-dev python3.8-venv zip
        python3.8 -m ensurepip
        python3.8 -m pip install pyinstaller
        python3.8 -m pip install faas-supervisor
        python3.8 -m pip install awslambdaric
    - name: Build binary
      run: |
        pyinstaller --onefile -n awslambdaric-bin faassupervisor/awslambdaric.py
        pyinstaller faassupervisor/awslambdaric.py
        cd dist/awslambdaric
        zip -r awslambdaric.zip *
        mv awslambdaric.zip ..
        cd ..
        rm -r awslambdaric
        mv awslambdaric-bin awslambdaric
    - name: Upload amd64 binary
      uses: actions/upload-artifact@v2
      with:
        name: awslambdaric
        path: dist/awslambdaric
    - name: Upload amd64 zip
      uses: actions/upload-artifact@v2
      with:
        name: awslambdaric.zip
        path: dist/awslambdaric.zip

  buil-awslambdaric-alpine-amd64:
    needs: test
    runs-on: ubuntu-20.04
    container: alpine:3.12
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        apk add libexecinfo-dev libcurl zip unzip cmake automake make curl-dev libtool autoconf gcc g++ zlib-dev musl-dev py3-pip python3 python3-dev
        python3 -m ensurepip
        pip install pyinstaller
        pip install faas-supervisor
        pip install awslambdaric
    - name: Build binary
      run: |
        pyinstaller --onefile -n awslambdaric-bin faassupervisor/awslambdaric.py
        pyinstaller faassupervisor/awslambdaric.py
        cd dist/awslambdaric
        zip -r awslambdaric-alpine.zip *
        mv awslambdaric-alpine.zip ..
        cd ..
        rm -r awslambdaric
        mv awslambdaric-bin awslambdaric-alpine
    - name: Upload amd64 binary
      uses: actions/upload-artifact@v2
      with:
        name: awslambdaric-alpine
        path: dist/awslambdaric-alpine
    - name: Upload amd64 zip
      uses: actions/upload-artifact@v2
      with:
        name: awslambdaric-alpine.zip
        path: dist/awslambdaric-alpine.zip

  build-aarch64:
    needs: test
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build binary on emulated aarch64
      uses: uraimo/run-on-arch-action@v2.0.7
      with:
        arch: aarch64
        distro: ubuntu16.04
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        dockerRunArgs: |
          --volume  "${PWD}:/repo"
        shell: /bin/sh
        install: |
          apt update
          apt install -y software-properties-common build-essential zlib1g-dev
          add-apt-repository -y ppa:deadsnakes/ppa
          apt update
          apt install -y python3.8-dev python3.8-venv zip
          python3.8 -m ensurepip
          python3.8 -m pip install pyinstaller
        run: |
          cd /repo
          python3.8 -m pip install -r requirements.txt
          pyinstaller --onefile -n supervisor-arm64 faassupervisor/supervisor.py
          pyinstaller faassupervisor/supervisor.py
          cd dist
          zip -r supervisor-arm64.zip supervisor
    - name: Upload arm64 binary
      uses: actions/upload-artifact@v2
      with:
        name: supervisor-arm64
        path: dist/supervisor-arm64
    - name: Upload arm64 zip
      uses: actions/upload-artifact@v2
      with:
        name: supervisor-arm64.zip
        path: dist/supervisor-arm64.zip

  release-assets:
    needs:
    - build-amd64
    - build-aarch64
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    steps:
    - name: Download jobs' artifacts
      uses: actions/download-artifact@v2
    - name: Upload artifacts to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          supervisor.zip/supervisor.zip
          supervisor/supervisor
          supervisor-arm64/supervisor-arm64
          supervisor-arm64.zip/supervisor-arm64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}